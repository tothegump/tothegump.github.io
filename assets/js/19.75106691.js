(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{295:function(a,r,e){"use strict";e.r(r);var t=e(4),i=Object(t.a)({},function(){var a=this,r=a.$createElement,e=a._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"一篇关于-failure-的文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一篇关于-failure-的文章","aria-hidden":"true"}},[a._v("#")]),a._v(" 一篇关于 Failure 的文章")]),a._v(" "),e("h2",{attrs:{id:"背景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#背景","aria-hidden":"true"}},[a._v("#")]),a._v(" 背景")]),a._v(" "),e("p",[a._v("Wikipedia 真是一个精彩的世界，在看关于 Byzantine fault tolerance 的解释，其中提到了")]),a._v(" "),e("blockquote",[e("p",[a._v("Byzantine failures are considered the most general and most difficult class of failures among the  "),e("a",{attrs:{href:"https://en.m.wikipedia.org/wiki/Failure_cause",target:"_blank",rel:"noopener noreferrer"}},[a._v("failure modes"),e("OutboundLink")],1),a._v(" ."),e("br"),a._v("\n发现这里 failure modes 标记了超链接。是哦，既然有 Byzantine Failure, 那就是说，还有其他的 Failure 咯，Google 一下。发现了这篇文章：\nhttp://alvaro-videla.com/2013/12/failure-modes-in-distributed-systems.html"),e("br"),a._v("\n发现大神们在处理分布式问题的时候，展现了强大的问题抽象能力，并分步骤的解决问题，非常有意思。\n一个分布式系统中，有很多个节点，出现错误是常态，那么如何面对这些错误呢，如何在错误是常态的情况下保证系统正常运行呢？\n对于一个节点，会收到其他节点发来的消息，这些消息是否可信呢？\n我们看看怎么去抽象并解决这些问题。")])]),a._v(" "),e("h2",{attrs:{id:"failure-semantics"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#failure-semantics","aria-hidden":"true"}},[a._v("#")]),a._v(" Failure Semantics")]),a._v(" "),e("p",[e("strong",[a._v("Failure Semantics")]),a._v(" 用来描述分布式系统中会遇到的错误的分类。")]),a._v(" "),e("h3",{attrs:{id:"byzantine-or-arbitrary-failures"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#byzantine-or-arbitrary-failures","aria-hidden":"true"}},[a._v("#")]),a._v(" Byzantine or arbitrary failures")]),a._v(" "),e("p",[a._v("这个是最复杂的错误类型，节点 A 身处一个完全混乱的环境：")]),a._v(" "),e("ul",[e("li",[a._v("没有收到其他节点的消息\n"),e("ul",[e("li",[a._v("可能节点 A 自己挂了，没有能力收到消息了 "),e("strong",[a._v("Failure!!!")])]),a._v(" "),e("li",[a._v("可能其他节点挂了，没有能力发送消息了 "),e("strong",[a._v("Failure!!!")])])])]),a._v(" "),e("li",[a._v("收到了节点 B 的消息，内容为 “Yes”：\n"),e("ul",[e("li",[a._v("可能，节点 B 已经不正常了，他想发的内容是 “No” "),e("strong",[a._v("Failure!!!")])]),a._v(" "),e("li",[a._v("可能，这个消息不是 B 发出的，是节点 C 伪装成为 B 发出的 "),e("strong",[a._v("Failure!!!")])]),a._v(" "),e("li",[a._v("可能这个消息就是 B 发出的而且就是想发一个 “Yes” 的内容，但这个消息是100年前发的，沧海桑田，这条消息早已过期了 "),e("strong",[a._v("Failure!!!")]),a._v("\n这就烦恼了，完全没法玩了，咋整，简化一下问题吧")])])])]),a._v(" "),e("h3",{attrs:{id:"authentification-detectable-byzantine-failures"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#authentification-detectable-byzantine-failures","aria-hidden":"true"}},[a._v("#")]),a._v(" Authentification detectable byzantine failures")]),a._v(" "),e("p",[a._v("验证一下身份吧，使得节点不能被伪装，这样，至少消息来源和身份是可信的。 "),e("strong",[a._v("可以用非对称加密来实现")])]),a._v(" "),e("h3",{attrs:{id:"performance-failures-timing-error"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#performance-failures-timing-error","aria-hidden":"true"}},[a._v("#")]),a._v(" Performance failures (Timing Error)")]),a._v(" "),e("p",[a._v("虽然收到了正确的回复，但是，没有在正确的时间到达，要么早了，要么晚了。“在错误的时间遇到了对的人”。")]),a._v(" "),e("h3",{attrs:{id:"omission-failure"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#omission-failure","aria-hidden":"true"}},[a._v("#")]),a._v(" Omission failure")]),a._v(" "),e("p",[a._v("压根儿就没有收到回复。这其实也是没有这正确的时间到达。")]),a._v(" "),e("h3",{attrs:{id:"crash-failure"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#crash-failure","aria-hidden":"true"}},[a._v("#")]),a._v(" Crash failure")]),a._v(" "),e("p",[a._v("上面的特殊情况，总是收不到回复，其实是因为节点 crash 了")]),a._v(" "),e("h3",{attrs:{id:"fail-stop-failure"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fail-stop-failure","aria-hidden":"true"}},[a._v("#")]),a._v(" Fail-stop failure")]),a._v(" "),e("p",[a._v("就是，一个服务挂了，我们认为所有正确的服务都知道他挂了。")]),a._v(" "),e("h2",{attrs:{id:"failure-的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#failure-的关系","aria-hidden":"true"}},[a._v("#")]),a._v(" Failure 的关系")]),a._v(" "),e("p",[a._v("从上到下，是包含关系，依次简化问题，关注一个点，找出特殊情况，抽象为一种错误类型。从最开始的杂乱无章的拜占庭错误，到最后的，所有正确的服务都知道有一个服务挂了，不会被这个挂了的服务迷惑和影响。\nFailure modes in distributed systems")])])},[],!1,null,null,null);r.default=i.exports}}]);