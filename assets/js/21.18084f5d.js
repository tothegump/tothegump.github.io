(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{291:function(a,t,e){"use strict";e.r(t);var r=e(4),s=Object(r.a)({},function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"python-kafka-faust"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#python-kafka-faust","aria-hidden":"true"}},[a._v("#")]),a._v(" Python, Kafka, Faust")]),a._v(" "),e("p",[a._v("Kafka 的 client 端语言栈并不丰富，Python 一直没有一个好用的框架。查了一圈，底层的客户端有好几个，"),e("code",[a._v("kafka-python")]),a._v(", "),e("code",[a._v("confluent-kafka-python")]),a._v(", 似乎没问题，但实际上，这些都太底层了，缺少好用的封装。如果想要在生产环境使用这些，少不了写很多封装，处理各种边边角角的情况，比如说部署，就要有不少套路代码要写。\n最容易出现的想法是，要是 Kombu 支持 Kafka 就好了，这样可以直接使用 celery 来无缝衔接 kafka. 查了一圈发现，并没有。\n不过，倒是找到了一个文艺范十足的库， Faust 。名字取自歌德著作《浮士德》。取名太有深度了，歌德和卡夫卡，都是德语作家，他们都进过义务教育的课本:D\n就凭这个文艺十足的命名，也值得研究一番了。")]),a._v(" "),e("h2",{attrs:{id:"文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文档","aria-hidden":"true"}},[a._v("#")]),a._v(" 文档")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://faust.readthedocs.io/en/latest/playbooks/quickstart.html#quickstart",target:"_blank",rel:"noopener noreferrer"}},[a._v("Quickstart — Faust 1.5.0 documentation"),e("OutboundLink")],1),a._v("\n文档一眼扫过去，非常的有好感，Quickstart, User Guide, FAQ, Contributing, Developer Guide 应有尽有，非常清晰明了。")]),a._v(" "),e("h3",{attrs:{id:"用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用法","aria-hidden":"true"}},[a._v("#")]),a._v(" 用法")]),a._v(" "),e("p",[a._v("如果用过 Celery 的话，会惊喜得发现，Faust 的用法和 Celery 简直一模一样。可以非常快的上手。")]),a._v(" "),e("h2",{attrs:{id:"github-主页"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github-主页","aria-hidden":"true"}},[a._v("#")]),a._v(" github 主页")]),a._v(" "),e("p",[a._v("更新比较频繁， Issue 处理也比较及时，issue 标签分类清晰。")]),a._v(" "),e("h3",{attrs:{id:"出品"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#出品","aria-hidden":"true"}},[a._v("#")]),a._v(" 出品")]),a._v(" "),e("p",[a._v("Github 的组织是， Robinhood, 这个公司风头当然是非常猛了，可惜没有进入中国，但是准备进入，还搞了个排队，我没有排到，就退出了，非常遗憾。\n另外，发现 Faust 的 Creator 竟然是 Celery 的作者，这也就不难理解怎么做到跟 Celery 的用法是如此相近了。")]),a._v(" "),e("h2",{attrs:{id:"用起来吧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用起来吧","aria-hidden":"true"}},[a._v("#")]),a._v(" 用起来吧")]),a._v(" "),e("p",[a._v("我们来看看他的 Github 主页是怎么自夸的")]),a._v(" "),e("blockquote",[e("p",[a._v("It is used at "),e("a",{attrs:{href:"http://robinhood.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Robinhood"),e("OutboundLink")],1),a._v(" to build high performance distributed systems and real-time data pipelines that process billions of events every day.")])]),a._v(" "),e("h3",{attrs:{id:"谁在使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#谁在使用","aria-hidden":"true"}},[a._v("#")]),a._v(" 谁在使用")]),a._v(" "),e("p",[a._v("Faust 已经在 Robinhood 的高性能分布式系统中使用的非常不错了，在实时数据方面，每天处理数亿的事件。")]),a._v(" "),e("h3",{attrs:{id:"简单"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简单","aria-hidden":"true"}},[a._v("#")]),a._v(" 简单")]),a._v(" "),e("p",[a._v("短短几行，就可以实现生产者和消费者，屏蔽了很多底层的逻辑。用法跟 Celery 类似，非常容易上手。")]),a._v(" "),e("h3",{attrs:{id:"高可用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高可用","aria-hidden":"true"}},[a._v("#")]),a._v(" 高可用")]),a._v(" "),e("p",[a._v("我觉得，这也是 Faust 最值得用的，如果你直接使用底层的库，这些逻辑都要自己处理，处理方式呢，也都是套路，且与业务无关。")]),a._v(" "),e("h3",{attrs:{id:"分布式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分布式","aria-hidden":"true"}},[a._v("#")]),a._v(" 分布式")]),a._v(" "),e("p",[a._v("这个好理解，可以起多个实例。")]),a._v(" "),e("h3",{attrs:{id:"快"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快","aria-hidden":"true"}},[a._v("#")]),a._v(" 快")]),a._v(" "),e("p",[a._v("这块没有去看测评，应该还不错吧。即使有问题，我也对未来的优化有信心。")]),a._v(" "),e("h3",{attrs:{id:"灵活"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#灵活","aria-hidden":"true"}},[a._v("#")]),a._v(" 灵活")]),a._v(" "),e("p",[a._v("最开始关注到 Faust, 就是因为要找跟 Django 结合的 Kafka 客户端框架。当然这块是没问题的，而且 Faust 还能完美集成 Flask, SQLAlchemy, NTLK, Numpy, Scikit, TensorFlow 等等。")])])},[],!1,null,null,null);t.default=s.exports}}]);